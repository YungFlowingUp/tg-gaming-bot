require('dotenv').config();
const fs = require('fs').promises;
const path = require('path');
const CryptoJS = require('crypto-js');
const readline = require('readline');
const { program } = require('commander');

//* Checking .env
const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY;
if (!ENCRYPTION_KEY) {
    console.error('‚ùå  ENCRYPTION_KEY not found in .env');
    console.log('üí°  –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: npm run init-encrypted-key');
    console.log('üí°  –ó–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –≤–∞—à .env —Ñ–∞–π–ª');
    process.exit(1);
}

function encryptId(userId) {
    return CryptoJS.AES.encrypt(userId.toString(), ENCRYPTION_KEY).toString();
}

function decryptId(encryptedId) {
    try {
        const bytes = CryptoJS.AES.decrypt(encryptedId, ENCRYPTION_KEY);
        return bytes.toString(CryptoJS.enc.Utf8);
    } catch (error) {
        return null;
    }
}

//* Decrypting the whole admin file 
async function decryptWholeAdminFile() {
    const adminsConfing = await loadAdmins();
    const decryptedAdminsConfig = {};
    decryptedAdminsConfig.superAdmins = adminsConfing.superAdmins.map(id => decryptId(id));
    decryptedAdminsConfig.admins = adminsConfing.admins.map(id => decryptId(id));
    return decryptedAdminsConfig
}

//* Path to the admins.json folder
const ADMINS_FILE = path.join(__dirname, '../configs/encrypted/admins.json');

async function loadAdmins() {
    try {
        await fs.access(ADMINS_FILE);
        const data = await fs.readFile(ADMINS_FILE, 'utf8');
        return JSON.parse(data);
    } catch {
        //* If there is no admins.json (path = ADMINS_FILE)
        return { superAdmins: [], admins: [] };
    }
}

async function saveAdmins(adminsConfig) {
    await fs.mkdir(path.dirname(ADMINS_FILE), { recursive: true });
    await fs.writeFile(ADMINS_FILE, JSON.stringify(adminsConfig, null, 2));
}

function askQuestion(question) {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    return new Promise((resolve) => {
        rl.question(question, (answer) => {
            rl.close();
            resolve(answer.toLowerCase().trim());
        });
    });
}

//* Adding an admin or a super-admin
async function addAdmin(userId, isSuperAdmin = false) {
    const adminsConfig = await loadAdmins();
    const decryptedAdminsConfig = await decryptWholeAdminFile();   
    const encryptedId = encryptId(userId);

    if (isSuperAdmin) { //* Adding a super-admin
        if (!decryptedAdminsConfig.superAdmins.includes(userId)) {
            adminsConfig.superAdmins.push(encryptedId);
            console.log(`‚úÖ  –î–æ–±–∞–≤–ª–µ–Ω –°–£–ü–ï–†-–∞–¥–º–∏–Ω: ${userId}`);
        } else {
            console.log(`‚ÑπÔ∏è  –°–£–ü–ï–†-–∞–¥–º–∏–Ω ${userId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
        
        //! Super-admin automatically duplicates into the admins pull (regular)
        if (!decryptedAdminsConfig.admins.includes(userId)) { //* If this admin wasn't already created as regular admin
            adminsConfig.admins.push(encryptedId);
            console.log(`‚úÖ  –°–£–ü–ï–†-–∞–¥–º–∏–Ω ${userId} —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω`);
        }
    } else { //* Adding an admin (regular)
        if (!decryptedAdminsConfig.admins.includes(userId)) {
            adminsConfig.admins.push(encryptedId);
            console.log(`‚úÖ  –î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω: ${userId}`);
        } else {
            console.log(`‚ÑπÔ∏è  –ê–¥–º–∏–Ω ${userId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
    }

    await saveAdmins(adminsConfig);
    return adminsConfig;
}

async function removeAdmin(userId, isSuperAdmin = false) {
    const adminsConfig = await loadAdmins();
    const decryptedAdminsConfig = await decryptWholeAdminFile();

    const isIDSuperAdmin = decryptedAdminsConfig.superAdmins.includes(userId);
    const isIDAdmin = decryptedAdminsConfig.admins.includes(userId);
    
    if (!isIDAdmin) {
        console.log(`‚ùå  –¢–∞–∫–æ–π ID: ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–æ–≤`);
        return adminsConfig;
    }

    if (isSuperAdmin) {  //* Super-admin actions
        if (!isIDSuperAdmin) {
            console.log(`‚ùå  –¢–∞–∫–æ–π ID: ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –°–£–ü–ï–†-–∞–¥–º–∏–Ω–æ–≤`);
            return adminsConfig;
        }

        //* Deleting from super-admins
        adminsConfig.superAdmins = adminsConfig.superAdmins.filter(id => decryptId(id) !== userId);
        console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω –∏–∑ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤: ${userId}`);

        //* Asking if this super-admin should be also deleted from regular admin
        const response = await askQuestion(
            `‚ùì –£–¥–∞–ª–∏—Ç—å ${userId} —Ç–∞–∫–∂–µ –∏–∑ –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤? (y/N): `
        );            
        if (response === 'y' || response === 'yes' || response === '–Ω') {
            adminsConfig.admins = adminsConfig.admins.filter(id => decryptId(id) !== userId);
            console.log(`üóëÔ∏è  –¢–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤: ${userId}`);
        } else {
            console.log(`‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Å—Ç–∞–ª—Å—è –æ–±—ã—á–Ω—ã–º –∞–¥–º–∏–Ω–æ–º`);
        }
    } else { //* Regular admin actions
        if (isIDSuperAdmin) { //* If a refular admin is also an super-admin
            console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —è–≤–ª—è–µ—Ç—Å—è –°–£–ü–ï–†-–∞–¥–º–∏–Ω–æ–º!`);
            const response = await askQuestion(
                `‚ùì ID —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): `
            );            
            if (response === 'y' || response === 'yes' || response === '–Ω') {
                adminsConfig.superAdmins = adminsConfig.superAdmins.filter(id => decryptId(id) !== userId);
                console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω –∏–∑ –°–£–ü–ï–†-–∞–¥–º–∏–Ω–æ–≤: ${userId}`);

                adminsConfig.admins = adminsConfig.admins.filter(id => decryptId(id) !== userId);
                console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤: ${userId}`);
            } else {
                console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Å–æ—Ö—Ä–∞–Ω–∏–ª —Å–≤–æ–∏ —Ä–æ–ª–∏!`);
            }
        } else {
            adminsConfig.admins = adminsConfig.admins.filter(id => decryptId(id) !== userId);
            console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤: ${userId}`);
        }     
    }
    await saveAdmins(adminsConfig);
    return adminsConfig;
}

async function removeAdminForce(userId) {
    const adminsConfig = await loadAdmins();
    const decryptedAdminsConfig = await decryptWholeAdminFile();

    const isIDSuperAdmin = decryptedAdminsConfig.superAdmins.includes(userId);
    const isIDAdmin = decryptedAdminsConfig.admins.includes(userId);

    if (!isIDAdmin) {
        console.log(`‚ùå  –¢–∞–∫–æ–π ID: ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–æ–≤`);
        return adminsConfig;
    }
    
    if (isIDSuperAdmin) {
        adminsConfig.superAdmins = adminsConfig.superAdmins.filter(id => decryptId(id) !== userId);
        console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω –∏–∑ –°–£–ü–ï–†-–∞–¥–º–∏–Ω–æ–≤: ${userId}`);
    }
    adminsConfig.admins = adminsConfig.admins.filter(id => decryptId(id) !== userId);
    console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω –∏–∑ –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: ${userId}`);
    
    await saveAdmins(adminsConfig);
    return adminsConfig;
} 

async function showAdmins() {
    const adminsConfig = await loadAdmins();
    console.log('='.repeat(75));
    console.log('üëë  –°–£–ü–ï–†-–∞–¥–º–∏–Ω—ã:');
    adminsConfig.superAdmins.forEach(encryptedId => {
        const decryptedId = decryptId(encryptedId);
        console.log(`   ${decryptedId} (encrypted: ${encryptedId})`);
    });

    console.log('\nüë•  –ê–¥–º–∏–Ω—ã:');
    adminsConfig.admins.forEach(encryptedId => {
        const decryptedId = decryptId(encryptedId);
        console.log(`   ${decryptedId} (encrypted: ${encryptedId})`);
    });

    console.log(`\nüìä  –í—Å–µ–≥–æ: ${adminsConfig.superAdmins.length} –°–£–ü–ï–†-–∞–¥–º–∏–Ω–æ–≤, ${adminsConfig.admins.length} –∞–¥–º–∏–Ω–æ–≤`);
    console.log('='.repeat(75));
}


program
    .name('admin-cli')
    .description('CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏ –±–æ—Ç–∞')
    .version('1.0.0');

//* Adding a super-admin
program
    .command('add-super <userId>')
    .description('–î–æ–±–∞–≤–∏—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞')
    .action(async (userId) => {
        await addAdmin(userId, true);
        await showAdmins();
    });

//* Adding an admin (regular)
program
    .command('add <userId>')
    .description('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞')
    .action(async (userId) => {
        await addAdmin(userId, false);
        await showAdmins();
    });

//* Removing a super-admin
program
    .command('remove-super <userId>')
    .description('–£–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞')
    .action(async (userId) => {
        await removeAdmin(userId, true);
        await showAdmins();
    });

//* Removing an admin (regular)
program
    .command('remove <userId>')
    .description('–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞')
    .action(async (userId) => {
        await removeAdmin(userId, false);
        await showAdmins();
    });

//* Showing all the admins
program
    .command('list')
    .description('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤')
    .action(async () => {            
        await showAdmins();
    });

//* Initializing (just for the record)
program
    .command('init <userId>')
    .description('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞')
    .action(async (userId) => {
        const adminsConfig = await loadAdmins();
        
        if (adminsConfig.superAdmins.length > 0) {
            console.log('‚ùå –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            await showAdmins();
            return;
        }

        await addAdmin(userId, true);
        console.log('üéâ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
        await showAdmins();
    });

//* Force removing id from all admins
program
    .command('remove-force <userId>')
    .description('–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ –∏–∑ –≤—Å–µ—Ö —Ä–æ–ª–µ–π')
    .action(async (userId) => {
       await removeAdminForce(userId);
       await showAdmins();
    });

program.parseAsync(process.argv).catch(console.error);