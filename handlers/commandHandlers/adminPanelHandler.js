const { requireSuperAdmin, requireSuperAdminCallback } = require("../../utils/wrappers");
const { 
    addAdmin, getAllAdmins, 
    removeAdmin, demoteSuperAdmin 
} = require("../../utils/permissions");
const { 
    adminMainKeyboard, adminCancelKeyboard, 
    createAdminsListKeyboard, createSuperAdminConfirmKeyboard 
} = require("../../keyboards/adminKeyboards");

async function handleAdminPanel(bot, msg, globalStates) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    globalStates.clearAdminState(userId);
   
    await bot.sendMessage(chatId, '‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏:', adminMainKeyboard);
    
    //TODO delete
    console.log("LOGGING: handleAdminPanel")
    console.log(globalStates);
    console.log("-".repeat(60));
    
}

async function handleShowAdmins(bot, msg) {
    const chatId = msg.chat.id;

    const admins = await getAllAdmins();  
    
    //TODO delete
    console.log(admins);
    console.log("-".repeat(60));

    let message = 'üë• <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n\n';

    message += '<b>üëë –°—É–ø–µ—Ä–∞–¥–º–∏–Ω—ã:</b>\n';
    admins.superAdmins.forEach((id, index) => {
        message += `  ${index + 1}. <code>${id}</code>\n`;
    });
    
    message += '\n<b>üë• –ê–¥–º–∏–Ω—ã:</b>\n';
    admins.admins.forEach((id, index) => {
        message += `  ${index + 1}. <code>${id}</code>\n`;
    });

    message += `\nüìä  –í—Å–µ–≥–æ: <b>${admins.superAdmins.length}</b>  –°–£–ü–ï–†-–∞–¥–º–∏–Ω–æ–≤, <i>${admins.admins.length}</i>  –∞–¥–º–∏–Ω–æ–≤`;
    
    await bot.sendMessage(chatId, message, {
        ...adminMainKeyboard,
        parse_mode: 'HTML'
    });
}

async function handleAddAdmin(bot, msg, globalStates) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    globalStates.setAdminState(userId, globalStates.ADMIN_STATES.AWAITING_ADMIN_ID);

    await bot.sendMessage(chatId, 
        'üë• <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞</b>\n' +
        '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n' +
        '–ü—Ä–∏–º–µ—Ä: <code>322369148</code>', { 
        ...adminCancelKeyboard,
        parse_mode: 'HTML'
    });

    //TODO delete
    console.log(globalStates);
    console.log("-".repeat(60));
}

async function handleAddSuperAdmin(bot, msg, globalStates) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    globalStates.setAdminState(userId, globalStates.ADMIN_STATES.AWAITING_SUPERADMIN_ID);

    await bot.sendMessage(chatId, 
        'üë• <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –°–£–ü–ï–†-–∞–¥–º–∏–Ω–∞</b>\n' +
        '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n' +
        '–ü—Ä–∏–º–µ—Ä: <code>322369148</code>', { 
        ...adminCancelKeyboard,
        parse_mode: 'HTML'
    });

    //TODO delete
    console.log(globalStates);
    console.log("-".repeat(60));
}

async function handleRemoveAdmin(bot, msg, globalStates) {
    try {
        const chatId = msg.chat.id;
        
        const admins = await getAllAdmins();       
        
        const adminsListKeyboard = createAdminsListKeyboard(admins);
        
        await bot.sendMessage(chatId, 
            'üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏—è –ø—Ä–∞–≤:</b>\n\n' +
            'üëë - –°–£–ü–ï–†-–∞–¥–º–∏–Ω\n' +
            'üë• - –û–±—ã—á–Ω—ã–π –∞–¥–º–∏–Ω\n\n' +
            '<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</i>', {
            parse_mode: 'HTML',
            ...adminsListKeyboard
        });
        
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤ handleRemoveAdmin:', error.message);
    }
}

async function handleAdminCallbackQuery(bot, callbackQuery, globalStates) {
    try {
        const chatId = callbackQuery.message.chat.id;
        const userId = callbackQuery.from.id;
        const data = callbackQuery.data;

        await bot.answerCallbackQuery(callbackQuery.id); //* No loading
        
        //* Handling canceling
        if (data === 'admin_cancel') {
            await bot.editMessageText('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id,
                reply_markup: { inline_keyboard: [] }
            });
            
            //* Showing admin panel
            await bot.sendMessage(chatId, '‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏</b>', {
                ...adminMainKeyboard,
                parse_mode: 'HTML'
            });
            return;
        }
        
        //* Handling choosing of an admin (+ sending confiramtion if super admin is chosen)
        if (data.startsWith('remove_admin:')) {
            const parts = data.split(':');
            const selectedUserId = parseInt(parts[1]); //* Converting to a number
            const adminType = parts[2]; //* 'super' –∏–ª–∏ 'admin'            
            
            //* Checking if deleteing myself
            if (selectedUserId === userId) {
                await bot.editMessageText('‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.', {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id,
                    reply_markup: { inline_keyboard: [] }
                });
                return;
            }
            
            //* If deleting a regular admin - delete straight up!
            if (adminType === 'admin') {
                const result = await removeAdmin(selectedUserId, false);
                
                await bot.editMessageText(result.message, {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id,
                    parse_mode: 'HTML',
                    reply_markup: { inline_keyboard: [] }
                });
            } //* If deleting a super admin - needed confirmation!            
            else if (adminType === 'super') { 
                const confirmationKeyboard = createSuperAdminConfirmKeyboard(selectedUserId);
                
                await bot.editMessageText(
                    `‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n` +
                    `–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –°–£–ü–ï–†-–∞–¥–º–∏–Ω–∞ <code>${selectedUserId}</code>\n\n` +
                    `üëëüë• –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –°–£–ü–ï–†-–∞–¥–º–∏–Ω–∞ –∏ –æ–±—ã—á–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞\n\n` +
                    `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id,
                    parse_mode: 'HTML',
                    ...confirmationKeyboard
                });
            }
        }
        
        //* Handling super admin removing confirmation 
        if (data.startsWith('confirm_remove:')) {
            const parts = data.split(':');
            const userIdToRemove = parseInt(parts[1]);
            const action = parts[2]; //* 'full' || 'demote'
            
            let result;
            
            if (action === 'full') {
                result = await removeAdmin(userIdToRemove, true);
            } else if (action === 'demote') {
                result = await demoteSuperAdmin(userIdToRemove);
            }
            
            await bot.editMessageText(result.message, {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id,
                parse_mode: 'HTML',
                reply_markup: { inline_keyboard: [] }
            });
        }
        
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤ handleAdminCallbackQuery:', error.message);
    }
}

async function _handleAdminIdInput(bot, msg, globalStates) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    const userState = globalStates.getAdminState(userId);

    //* Just checking for the record
    if (!userState) return;

    //* Handling canceling 
    if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
        globalStates.clearAdminState(userId);
        await handleAdminPanel(bot, msg, globalStates);
        return;
    }

    //* Input validation
    const inputId = parseInt(text.trim());
    if (isNaN(inputId) || inputId <= 0) {
        await bot.sendMessage(chatId, 
            'üë• <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ ' +
            `${userState.state === globalStates.ADMIN_STATES.AWAITING_ADMIN_ID ? '–∞–¥–º–∏–Ω–∞' : '–°–£–ü–ï–†-–∞–¥–º–∏–Ω–∞'}</b>\n` +
            '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.\n–ü—Ä–∏–º–µ—Ä: <code>322369148</code>', {
            ...adminCancelKeyboard,
            parse_mode: 'HTML'
        });

        return;
    }
    
    //* Adding an admin
    let result;
    if (userState.state === globalStates.ADMIN_STATES.AWAITING_ADMIN_ID) { //* Regular admin
        result = await addAdmin(inputId, false); 
    } 
    else if (userState.state === globalStates.ADMIN_STATES.AWAITING_SUPERADMIN_ID) { //* Super admin
        result = await addAdmin(inputId, true); 
    }
    
    //* Clearing state
    globalStates.clearAdminState(userId);
    
    //TODO delete
    console.log(globalStates);
    console.log("-".repeat(60));

    await bot.sendMessage(chatId, result.message, {
        ...adminMainKeyboard,
        parse_mode: 'HTML'
    });

    handleShowAdmins(bot, msg);
}

//* Handler for admin panel input text
async function handleAdminTextMessage(bot, msg, globalStates) {
    const userId = msg.from.id;
    const userState = globalStates.getAdminState(userId);
    
    if (userState) {
        if (userState.state === globalStates.ADMIN_STATES.AWAITING_ADMIN_ID || 
            userState.state === globalStates.ADMIN_STATES.AWAITING_SUPERADMIN_ID) {
            await _handleAdminIdInput(bot, msg, globalStates);
        }
    }
}


module.exports = {
    handleAdminPanel: requireSuperAdmin(handleAdminPanel), // Main admin panel

    handleAddAdmin: requireSuperAdmin(handleAddAdmin), // Adding an admin
    handleAddSuperAdmin: requireSuperAdmin(handleAddSuperAdmin), // Adding a super admin
    handleAdminTextMessage: requireSuperAdmin(handleAdminTextMessage), // Input from user. Then adding to admins

    handleRemoveAdmin: requireSuperAdmin(handleRemoveAdmin), // Removing an admin
    handleAdminCallbackQuery: requireSuperAdminCallback(handleAdminCallbackQuery), // Callback from inline keyboard

    handleShowAdmins: requireSuperAdmin(handleShowAdmins) // Showing the list of admins
}